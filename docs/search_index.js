(function () {
  window.DENO_DOC_SEARCH_INDEX = {"kind":"search","nodes":[{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"},{"char":"v","kind":"Variable","title":"Variable"}],"name":"JsonHigh","file":".","doc":"This is the high-level interface over {@link JsonLow} optimized for convenience. It provides similar functionality and granularity to other streaming parsers, such as [Clarinet](https://github.com/dscape/clarinet) or [creationix/jsonparse](https://github.com/creationix/jsonparse).","url":"././~/JsonHigh.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"JsonHighEvents","file":".","doc":"### Basic events\n\nThe basic usage of `JsonHigh` involves 4 event handlers without arguments which indicate start and end of structures:\n* {@link JsonHighEvents.openArray}\n* {@link JsonHighEvents.closeArray}\n* {@link JsonHighEvents.openObject}\n* {@link JsonHighEvents.closeObject}\n\nAnd 2 event handlers with one argument which capture primitives:\n\n* {@link JsonHighEvents.key}\n* {@link JsonHighEvents.value}\n\nFinally, there is the argumentless {@link JsonHighEvents.end} event handler.\n\n### Extra events\n\nThese handlers take no arguments:\n\n* {@link JsonHighEvents.openKey}\n* {@link JsonHighEvents.openString}\n* {@link JsonHighEvents.openNumber}\n\n### Conditional events\n\nThese handlers take no arguments:\n\n* {@link JsonHighEvents.closeKey}\n* {@link JsonHighEvents.closeString}\n\nThese handlers receive the buffer that should be consumed:\n\n* {@link JsonHighEvents.bufferKey}\n* {@link JsonHighEvents.bufferString}\n* {@link JsonHighEvents.bufferNumber}","url":"././~/JsonHighEvents.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.openArray","file":".","doc":"An array started (`[`).","url":"././~/JsonHighEvents.openArray.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.closeArray","file":".","doc":"An array ended (`]`).","url":"././~/JsonHighEvents.closeArray.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.openObject","file":".","doc":"An object started (`{`).","url":"././~/JsonHighEvents.openObject.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.closeObject","file":".","doc":"An object ended (`}`).","url":"././~/JsonHighEvents.closeObject.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.key","file":".","doc":"An object's key ended. \n\nThe argument of the handler contains the key as a JavaScript string.\n\n`[conditional]` Called only in default (non-buffering) mode.\n\nThis event can be suppressed by setting {@link JsonHighOptions.maxStringBufferLength}.","url":"././~/JsonHighEvents.key.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.value","file":".","doc":"A primitive JSON value ended. \n\nThe argument of the event contains the corresponding JavaScript value: `true`, `false`, `null`, a number, or a string.\n\nThis event can be suppressed for strings if {@link JsonHighOptions.maxStringBufferLength} is set and for numbers if {@link JsonHighOptions.parseNumbers} is set to `false`.","url":"././~/JsonHighEvents.value.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.end","file":".","doc":"Called by the `end` method of the stream to confirm that the parsed JSON document is complete and valid.","url":"././~/JsonHighEvents.end.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.openKey","file":".","doc":"A key started (`\"`, in key position).","url":"././~/JsonHighEvents.openKey.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.openString","file":".","doc":"A string value started (`\"`).","url":"././~/JsonHighEvents.openString.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.openNumber","file":".","doc":"A number value started.","url":"././~/JsonHighEvents.openNumber.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.closeKey","file":".","doc":"A key ended (`\"`).\n\n`[conditional]` Called instead of the `key` event **when `maxStringBufferLength` is set**.","url":"././~/JsonHighEvents.closeKey.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.closeString","file":".","doc":"A string value ended (`\"`).\n\n`[conditional]` Called instead of the `value` event **when `maxStringBufferLength` is set**.\n","url":"././~/JsonHighEvents.closeString.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.bufferKey","file":".","doc":"Key buffer is ready for consumption.\n\n`[conditional]` Called instead of the `key` event **when `maxStringBufferLength` is set**.\n\nThe `buffer` then contains `maxStringBufferLength` code points or possibly less if we reached the end of a key.","url":"././~/JsonHighEvents.bufferKey.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.bufferString","file":".","doc":"String buffer is ready for consumption.\n\n`[conditional]` For string values, called instead of the `value` event **when `maxStringBufferLength` is set**.\n\nThe buffer then contains `maxStringBufferLength` code points or possibly less if we reached the end of a string value.","url":"././~/JsonHighEvents.bufferString.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighEvents.bufferNumber","file":".","doc":"Number buffer is ready for consumption.\n\n`[conditional]` For number values, called instead of the `value` event **when `parseNumbers` is set**.\n\nThe buffer then contains the unparsed number (represented as a string).","url":"././~/JsonHighEvents.bufferNumber.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"JsonHighHandler","file":".","doc":"TODO: doc","url":"././~/JsonHighHandler.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"JsonHighHandlers","file":".","doc":"TODO: this should be called something like JsonHighParameters or JsonHighArguments or sth.","url":"././~/JsonHighHandlers.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"JsonHighOptions","file":".","doc":"### Options","url":"././~/JsonHighOptions.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighOptions.maxStringBufferLength","file":".","doc":"See also: the similar {@link JsonHighOptions.bufferOnChunk} option. These options can be combined. Differences between them are marked with a strong font.\n\nThe maximum length of the key or string buffer, in code points.\n\nIf **set to a value in range `[1;Infinity)`**, the `key` event handler won't be called and, for strings, the `value` event handler won't be called. \n\nInstead, the `bufferKey` and `bufferString` handlers will be called **as soon as the given number of code points has been collected** or when the key/string is finished. \n\nIn the latter case **the number of code points may be smaller than `maxStringBufferLength`** and a `closeKey`/`closeString` handler will be called after the last `buffer*` event to signal the finish. \n\nThis is useful **when dealing with long strings** where it's desirable to stream them piece-by-piece, e.g. when working with LLMs (Large Language Models). \n\nSee [Add support for incomplete key and value strings #10](https://github.com/xtao-org/jsonhilo/issues/10) for more information.\n","url":"././~/JsonHighOptions.maxStringBufferLength.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighOptions.bufferOnChunk","file":".","doc":"See also: the similar {@link JsonHighOptions.maxStringBufferLength} option. These options can be combined. Differences between them are marked with a strong font.\n\nIf **set to `true`**, the `key` event handler won't be called and, for strings, the `value` event handler won't be called. \n\nInstead, the `bufferKey` and `bufferString` handlers will be called **as soon as the current chunk (passed in via the `.chunk()` method of the stream) has been processed** or when the key/string is finished. \n\nIn the latter case a `closeKey`/`closeString` handler will be called after the last `buffer*` event to signal the finish.\n\nThis is useful **when it's desirable to stream strings or keys piece-by-piece, in sync with the chunks being received, without needing to specify a fixed buffer length;** e.g. when working with LLMs (Large Language Models).\n\nSee [Add support for incomplete key and value strings #10](https://github.com/xtao-org/jsonhilo/issues/10) for more information.\n","url":"././~/JsonHighOptions.bufferOnChunk.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighOptions.maxNumberLength","file":".","doc":"Specifies the maximum length of a number value (in characters).\n","url":"././~/JsonHighOptions.maxNumberLength.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JsonHighOptions.parseNumbers","file":".","doc":"Controls whether numbers should be parsed (converted to JavaScript `number` type) which is the case by default. \n\nIf set to `false`, the `value` event handler won't be called for numbers. Instead, the `bufferNumber` handler will be called with the number as a string.\n\nThis is useful when dealing with big numbers which would lose precision when converted to the `number` type.\n","url":"././~/JsonHighOptions.parseNumbers.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"JsonHighStream","file":".","doc":"### Return value\n\n{@link JsonHigh} returns a stream object with the following methods:","url":"././~/JsonHighStream.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"JsonHighStream.chunk","file":".","doc":"Accepts a JSON chunk to parse. \n\nReturns the stream object for chaining.","url":"././~/JsonHighStream.chunk.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"JsonHighStream.end","file":".","doc":"Call it to signal to the stream that the current JSON document is finished.\n\nIf there is no error, it will then call the corresponding `end()` event handler, and return whatever that returned.","url":"././~/JsonHighStream.end.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"JsonHighStream.depth","file":".","doc":"Reports current depth (level of nesting).\n\n**NOTE**: an `open*` or `close*` handler is always called *after* the depth is updated, meaning:\n\n* in `openObject`/`openArray` handlers the lowest depth reported will be 1 -- we entered a top-level object/array and are now at depth 1\n\n* in `closeObject`/`closeArray` handlers the lowest depth reported will be 0 -- we exited a top-level object/array and are now at depth 0 (top-level)","url":"././~/JsonHighStream.depth.html","deprecated":false}]};
})()